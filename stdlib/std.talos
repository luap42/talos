#-------------------------
# (title)
# #lib# STANDARD LIBRARY
# #desc#
# #> Standard library for
# #> TALOS programming language
# #enddesc#
# #author# Paul Strobach
# (end title)
#-------------------------

#-------------------------
# (commment)
# #> ABOUT THIS LIBRARY
# #> ==================
# #> This standard library shall
# #> include general functions
# #> and constants that should
# #> help you writing better
# #> and easier-to-read TALOS
# #> programms.
# (end comment)
#-------------------------


#-------------------------
# (section)
# #section# STANDARD INPUT/OUTPUT
# (end section)
#-------------------------


#-------------------------
# (sub)
# #sub# @print
# #param# $what
# #return# -
# #desc#
# #> Prints $what to
# #> standard output.
# #enddesc#
# (end sub)
#-------------------------
sub @print $what
    say $what
endsub


#-------------------------
# (sub)
# #sub# @input
# #param# $prompt
# #return# <<string>>
# #desc#
# #> Prints $prompt to
# #> standard output and
# #> accepts one line of
# #> user input.
# #enddesc#
# (end sub)
#-------------------------
sub @input $prompt
    listen |$input| $prompt
endsub


#-------------------------
# (section)
# #section# ARRAY FUNCTIONS
# (end section)
#-------------------------


#-------------------------
# (sub)
# #sub# @array_join
# #param# $array <<string[]>>
# #param# $glue <<string>>
# #return# <<string>>
# #desc#
# #> Joins array $array
# #> with glue $glue
# #enddesc#
# (end sub)
#-------------------------
sub @array_join $array $glue
    $ret = $array[0]
    $amount = (@array_length $array) - 1
    for $amount times [$k]
        $k2 = $k + 1
        $ret = $ret + $glue + ($array[$k2])
    endfor
    $array_join = $ret
endsub

#-------------------------
# (sub)
# #sub# @array_concat
# #param# $array1 <<any[]>>
# #param# $array2 <<any[]>>
# #return# <<any[]>>
# #desc#
# #> Combines array $array1
# #> and array $array2
# #enddesc#
# (end sub)
#-------------------------
sub @array_concat $array1 $array2
    $ret = $array1
    $amount = (@array_length $array2)
    for $amount times [$k]
        $ret = $ret + ($array2[$k])
    endfor
    $array_concat = $ret
endsub


#-------------------------
# (sub)
# #sub# @array_length
# #param# $array <<any[]>>
# #return# <<int>>
# #desc#
# #> Counts elements of
# #> array $array
# #enddesc#
# (end sub)
#-------------------------
sub @array_length $array
    $array_length = <<count>>$array
endsub



#-------------------------
# (section)
# #section# FILE SYSTEM FUNCTIONS
# (end section)
#-------------------------


#-------------------------
# (sub)
# #sub# @file_put
# #param# $filename <<string>>
# #param# $content <<string>>
# #return# -
# #desc#
# #> Writes $content to
# #> file $filename
# #enddesc#
# (end sub)
#-------------------------
sub @file_put $filename $content
    $file = <<file>>$filename
    fwrite |$file| $content
endsub


#-------------------------
# (sub)
# #sub# @file_get
# #param# $filename <<string>>
# #return# <<string>>
# #desc#
# #> Retrieves content from
# #> file $filename
# #enddesc#
# (end sub)
#-------------------------
sub @file_get $filename
    $file = <<file>>$filename
    $file_get = <<string>>$file
endsub



#-------------------------
# (var)
# #var# $small_alphabet
# #type# <<string[]>>
# #desc#
# #> Contains every small
# #> letter of the alphabet
# #> (a-z) in the correct
# #> order
# #enddesc#
# (end var)
#-------------------------
$small_alphabet = ("a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z")